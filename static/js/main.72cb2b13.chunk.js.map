{"version":3,"sources":["Util/util.tsx","Util/mapping.tsx","ExcelToJS/Step2.tsx","JsonToExcel/Step1.tsx","ExcelToJS/Step1.tsx","ExcelToJS/Step3.tsx","ExcelToJS/index.tsx","JsonToExcel/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["assignParentKey","obj","key1","key2","key3","getArabic","key","console","log","mapExcelToJS","excel","inputObject","excelOnlyOutput","inputObjectCopy","_","cloneDeep","Object","entries","excelKey","excelVal","ar","en","excelKey1","excelVal1","excelKey2","excelVal2","mapJSToExcel","inputEnglishObject","inputArabicObject","lastCategory","final","push","value","fontWeight","align","arabic","add","category","isNewCategory","wrap","Step2","setInputObject","useForm","register","handleSubmit","formState","errors","isSubmitting","onSubmit","a","eval","e","alert","defaultValue","rows","required","type","disabled","Step1","enInput","arInput","mapped","writeXlsxFile","fileName","setExcel","makeFinalObject","lastNestedCategory","row","splitted","split","length","data","map","sheetParsed","parseInt","sheet","readXlsxFile","file","isNaN","parsed","postProcessed","htmlFor","placeholder","accept","isEmpty","Step3","errorCodes","useState","isLoading","setIsLoading","output","setOutput","setExcelOnlyOutput","ref","useRef","useEffect","useLayoutEffect","current","scrollIntoView","behavior","readOnly","JSON5","stringify","space","ExcelToJS","JSToExcel","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72cb2b13.chunk.js","sourcesContent":["export const assignParentKey = (\n  obj: any,\n  key1: any,\n  key2?: any,\n  key3?: any\n) => {\n  obj[key1] = obj[key1] ?? {};\n  if (key2) {\n    obj[key1][key2] = obj[key1][key2] ?? {};\n  }\n  if (key3) {\n    obj[key1][key2][key3] = obj[key1][key2][key3] ?? {};\n  }\n};\n// key: general, key1: currenies, key2: sar\nexport const getArabic = (obj: any, key: any, key1?: any, key2?: any) => {\n  if (key1) {\n    if (key2) {\n      console.log(\"inside key2\", obj[key][key1] ? obj[key][key1][key2] : \"\");\n      return obj[key] ? (obj[key][key1] ? obj[key][key1][key2] : \"\") : \"\";\n    }\n    return obj[key] ? obj[key][key1] : \"\";\n  }\n  return obj[key];\n};\n","// @ts-nocheck\nimport { NestedObject } from \"../types/Input\";\nimport _ from \"lodash\";\nimport { getArabic, assignParentKey } from \"./util\";\n\nexport const mapExcelToJS = (\n  excel: NestedObject,\n  inputObject: NestedObject\n) => {\n  console.log(\"Start Mapping inputObject\", inputObject);\n  const excelOnlyOutput: NestedObject = {};\n\n  // Take a copy of the inputObject to preserve existing values\n  const inputObjectCopy = _.cloneDeep(inputObject);\n\n  // Top Level\n  for (const [excelKey, excelVal] of Object.entries(excel)) {\n    if (\"en\" in excelVal) {\n      const obj = inputObjectCopy[excelKey];\n      if (obj) {\n        inputObjectCopy[excelKey] = excelVal.ar ?? excelVal.en;\n      } else {\n        excelOnlyOutput[excelKey] = excelVal.ar ?? excelVal.en;\n      }\n    } else {\n      // 1st Level\n      for (const [excelKey1, excelVal1] of Object.entries(excelVal)) {\n        if (\"en\" in excelVal1) {\n          // Assign {} if undefined\n          assignParentKey(inputObjectCopy, excelKey);\n          const obj = inputObjectCopy[excelKey][excelKey1];\n          if (obj) {\n            inputObjectCopy[excelKey][excelKey1] = excelVal1.ar ?? excelVal1.en;\n          } else {\n            assignParentKey(excelOnlyOutput, excelKey);\n            excelOnlyOutput[excelKey][excelKey1] = excelVal1.ar ?? excelVal1.en;\n          }\n        } else {\n          // 2st Level\n          for (const [excelKey2, excelVal2] of Object.entries(\n            excelVal1 as any\n          )) {\n            // Assign {} if undefined\n            assignParentKey(inputObjectCopy, excelKey, excelKey1);\n            const obj = inputObjectCopy[excelKey][excelKey1][excelKey2];\n            if (obj) {\n              inputObjectCopy[excelKey][excelKey1][excelKey2] =\n                excelVal2.ar ?? excelVal2.ar;\n            } else {\n              assignParentKey(excelOnlyOutput, excelKey, excelKey1);\n              excelOnlyOutput[excelKey][excelKey1][excelKey2] =\n                excelVal2.ar ?? excelVal1.en;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  console.log(\"result\", inputObjectCopy);\n  console.log(\"not found\", excelOnlyOutput);\n\n  return { inputObjectCopy, excelOnlyOutput };\n};\n\n//TODO: Arabic\nexport const mapJSToExcel = (\n  inputEnglishObject: NestedObject,\n  inputArabicObject: NestedObject\n) => {\n  const final: [][] = [];\n  let lastCategory;\n\n  // Columns\n  final.push([\n    { value: \"Service\", fontWeight: \"bold\" },\n    { value: \"Key\", fontWeight: \"bold\" },\n    { value: \"English\", fontWeight: \"bold\", align: \"left\" },\n    { value: \"Arabic\", fontWeight: \"bold\", align: \"right\" },\n  ]);\n\n  const add = (category, key, en, ar) => {\n    const isNewCategory = category !== lastCategory;\n\n    // Update last category if we got a new category\n    if (isNewCategory) {\n      lastCategory = category;\n    }\n\n    const obj = [\n      // Category\n      // Do not repeat category in every row\n      isNewCategory\n        ? { value: category, wrap: true, fontWeight: \"bold\" }\n        : { value: \"\" },\n      // key\n      { value: key },\n      // en\n      { value: en },\n      // ar\n      { value: ar },\n    ];\n\n    final.push(obj);\n  };\n\n  let currentCategory;\n  let arabic;\n  // Top Level\n  for (const [excelKey, excelVal] of Object.entries(inputEnglishObject)) {\n    if (typeof excelVal === \"string\") {\n      arabic = getArabic(inputArabicObject, excelKey);\n      add(\"\", excelKey, excelVal, arabic);\n    } else {\n      // 1st Level\n      for (const [excelKey1, excelVal1] of Object.entries(excelVal)) {\n        if (typeof excelVal1 === \"string\") {\n          currentCategory = excelKey;\n\n          arabic = getArabic(inputArabicObject, excelKey, excelKey1);\n          add(currentCategory, excelKey1, excelVal1, arabic);\n        } else {\n          // 2st Level\n          for (const [excelKey2, excelVal2] of Object.entries(\n            excelVal1 as any\n          )) {\n            arabic = getArabic(\n              inputArabicObject,\n              excelKey,\n              excelKey1,\n              excelKey2\n            );\n            currentCategory = `${excelKey}.${excelKey1}`;\n            add(currentCategory, excelKey2, excelVal2, arabic);\n          }\n        }\n      }\n    }\n  }\n  console.log(final);\n  return final;\n};\n","import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\ntype PropsType = {\r\n  setInputObject: Function;\r\n};\r\n\r\nexport const Step2 = ({ setInputObject }: PropsType) => {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting },\r\n  } = useForm();\r\n\r\n  const onSubmit = async ({ inputObject }: any) => {\r\n    try {\r\n      let en;\r\n      eval(\"en =\" + inputObject);\r\n      setInputObject(en);\r\n    } catch (e) {\r\n      console.log(e);\r\n      alert(e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Step 2: Input JS Object</h2>\r\n      <code>let en = </code>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <textarea\r\n          defaultValue={\"{}\"}\r\n          rows={30}\r\n          {...register(\"inputObject\", { required: true })}\r\n        />\r\n\r\n        {/* errors will return when field validation fails  */}\r\n        {errors.inputObject && <div>This field is required</div>}\r\n        <br />\r\n        <input type=\"submit\" disabled={isSubmitting} />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Step2;\r\n","import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { mapJSToExcel } from \"../Util/mapping\";\nimport { NestedObject } from \"../types/Input\";\nimport writeXlsxFile from \"write-excel-file\";\n\ntype propTypes = {};\n\nconst Step1 = ({}: propTypes) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n  } = useForm();\n\n  const onSubmit = async ({ enInput, arInput }: any) => {\n    try {\n      let en: NestedObject = {};\n      let ar: NestedObject = {};\n\n      eval(`en = ${enInput}; ar = ${arInput}`);\n      const mapped = mapJSToExcel(en!, ar!);\n\n      await writeXlsxFile(mapped, {\n        fileName: \"JSToExcel.xlsx\",\n      });\n    } catch (e) {\n      console.log(e);\n      alert(e);\n    }\n  };\n\n  return (\n    <>\n      <h2>Step 1: Input JS Objects</h2>\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <code>let en = </code>\n        <br />\n        <textarea\n          defaultValue={\"{}\"}\n          rows={30}\n          {...register(\"enInput\", { required: true })}\n        />\n        {errors.en && <div>This field is required</div>}\n        <br />\n        <code>let ar = </code>\n        <br />\n        <textarea defaultValue={\"{}\"} rows={30} {...register(\"arInput\")} />\n        {/* errors will return when field validation fails  */}\n        <br />\n        <input type=\"submit\" disabled={isSubmitting} />\n      </form>\n    </>\n  );\n};\n\nexport default Step1;\n","import readXlsxFile from \"read-excel-file\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport React from \"react\";\r\nimport { isNaN } from \"lodash\";\r\nimport _ from \"lodash\";\r\n\r\nconst defaultSheetNumber = 1;\r\nconst defaultCategoryCell = \"Service\";\r\nconst defaultKeyCell = \"Key\";\r\nconst defaultEnglishCell = \"English\";\r\nconst defaultArabicCell = \"Arabic\";\r\n\r\ntype PropsType = {\r\n  setExcel: Function;\r\n};\r\n\r\nconst Step1 = ({ setExcel }: PropsType) => {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting },\r\n  } = useForm();\r\n\r\n  const makeFinalObject = (rows: any[]) => {\r\n    const final: any = {};\r\n    let lastCategory;\r\n    let lastNestedCategory;\r\n    for (const row of rows) {\r\n      const category = row.category;\r\n      // Assign new category if we find one\r\n      if (category) {\r\n        const splitted = category.split(\".\");\r\n        // Check if nested or not\r\n        if (splitted.length === 2) {\r\n          lastCategory = splitted[0];\r\n          lastNestedCategory = splitted[1];\r\n        } else {\r\n          lastCategory = category;\r\n          lastNestedCategory = null;\r\n        }\r\n      }\r\n\r\n      if (!row.key) {\r\n        // Either this row has category key only or completely empty\r\n        continue;\r\n      }\r\n\r\n      // Exist 2nd level\r\n      if (lastCategory && lastNestedCategory) {\r\n        final[lastCategory][lastNestedCategory] = {\r\n          ...final[lastCategory][lastNestedCategory],\r\n          [row.key]: { en: row.en, ar: row.ar },\r\n        };\r\n        // Exist 1st level only\r\n      } else if (lastCategory) {\r\n        final[lastCategory] = {\r\n          ...final[lastCategory],\r\n          [row.key]: { en: row.en, ar: row.ar },\r\n        };\r\n      }\r\n      // Top Level\r\n      else {\r\n        final[row.key] = { ...final[row.key], en: row.en, ar: row.ar };\r\n      }\r\n    }\r\n    return final;\r\n  };\r\n\r\n  const onSubmit = async (data: any) => {\r\n    try {\r\n      const map = {\r\n        [data.key]: \"key\",\r\n        [data.en]: \"en\",\r\n        [data.ar]: \"ar\",\r\n        ...(data.category && { [data.category]: \"category\" }),\r\n      };\r\n\r\n      const sheetParsed = parseInt(data.sheet);\r\n      const parsed = await readXlsxFile(data.file[0], {\r\n        map,\r\n        sheet: isNaN(sheetParsed) ? data.sheet : sheetParsed,\r\n      });\r\n      if (parsed.errors.length) {\r\n        throw parsed.errors;\r\n      }\r\n      console.log(\"parsed\", parsed);\r\n      const postProcessed = makeFinalObject(parsed.rows);\r\n      console.log(\"postProcessed\", postProcessed);\r\n      setExcel(postProcessed);\r\n    } catch (e) {\r\n      alert(e);\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Step 1: Excel File</h2>\r\n\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <fieldset>\r\n          <legend>Data</legend>\r\n          <label htmlFor={\"sheet\"}>Sheet: </label>\r\n          <input\r\n            type=\"text\"\r\n            defaultValue={defaultSheetNumber}\r\n            placeholder=\"Number 1,2,3\"\r\n            {...register(\"sheet\", { required: true })}\r\n          />\r\n          <br /> <br />\r\n          <label htmlFor={\"category\"}>Category Cell (optional): </label>\r\n          <input\r\n            type=\"text\"\r\n            defaultValue={defaultCategoryCell}\r\n            placeholder=\"Cell Name\"\r\n            {...register(\"category\")}\r\n          />\r\n          <br /> <br />\r\n          <label htmlFor={\"key\"}>Key Cell: </label>\r\n          <input\r\n            type=\"text\"\r\n            defaultValue={defaultKeyCell}\r\n            placeholder=\"Cell Name\"\r\n            {...register(\"key\", { required: true })}\r\n          />\r\n          <br /> <br />\r\n          <label htmlFor={\"en\"}>EN Cell: </label>\r\n          <input\r\n            type=\"text\"\r\n            defaultValue={defaultEnglishCell}\r\n            placeholder=\"Cell Name\"\r\n            {...register(\"en\", { required: true })}\r\n          />\r\n          <label htmlFor={\"ar\"}> AR Cell: </label>\r\n          <input\r\n            type=\"text\"\r\n            defaultValue={defaultArabicCell}\r\n            placeholder=\"Cell Name\"\r\n            {...register(\"ar\", { required: true })}\r\n          />\r\n          <br />\r\n          <br />\r\n          <input\r\n            type=\"file\"\r\n            accept=\".xlsx\"\r\n            {...register(\"file\", { required: true })}\r\n          />\r\n          <br /> <br />\r\n          {!_.isEmpty(errors) && <div>Required Fields</div>}\r\n          <input type=\"submit\" disabled={isSubmitting} />\r\n        </fieldset>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Step1;\r\n","import React, { useEffect, useLayoutEffect, useRef, useState } from \"react\";\r\nimport { mapExcelToJS } from \"../Util/mapping\";\r\nimport { NestedObject } from \"../types/Input\";\r\nimport JSON5 from \"json5\";\r\n\r\ntype PropType = {\r\n  excel: NestedObject;\r\n  errorCodes: NestedObject;\r\n};\r\n\r\nexport const Step3 = ({ excel, errorCodes }: PropType) => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [output, setOutput] = useState<NestedObject>();\r\n  const [excelOnlyOutput, setExcelOnlyOutput] = useState<NestedObject>();\r\n\r\n  const ref = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    const output = mapExcelToJS(excel, errorCodes);\r\n    setOutput(output.inputObjectCopy);\r\n    setExcelOnlyOutput(output.excelOnlyOutput);\r\n    setIsLoading(false);\r\n  }, [excel, errorCodes]);\r\n\r\n  useLayoutEffect(() => {\r\n    // When processing done\r\n    if (!isLoading) {\r\n      ref.current && ref.current.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  }, [isLoading]);\r\n\r\n  if (isLoading) return <h3>We're cooking your translation!</h3>;\r\n\r\n  return (\r\n    <div ref={ref}>\r\n      <h2>Step 3: Output</h2>\r\n\r\n      <h4>Final Output</h4>\r\n      <p>\r\n        <b>Note:</b> Translations not found in Excel are kept AS IS\r\n      </p>\r\n      <textarea\r\n        readOnly\r\n        rows={30}\r\n        value={JSON5.stringify(output, { space: \"\\t\" })}\r\n      />\r\n      <p>[If interested] Translations found in Excel but NOT in your JSON:</p>\r\n      <textarea\r\n        readOnly\r\n        rows={30}\r\n        value={JSON5.stringify(excelOnlyOutput, { space: \"\\t\" })}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Step3;\r\n","import React, { useState } from \"react\";\nimport Step1 from \"./Step1\";\nimport Step2 from \"./Step2\";\nimport Step3 from \"./Step3\";\nimport { NestedObject } from \"../types/Input\";\n\nconst ExcelToJS = () => {\n  // Step1\n  const [excel, setExcel] = useState<NestedObject>();\n  // Step2\n  const [inputObject, setInputObject] = useState<NestedObject>();\n  return (\n    <div>\n      <p>\n        The purpose of this script is to take two inputs (Excel file, JS object)\n        and it will map and replace your english JS object translations with\n        arabic ones from excel sheet.\n      </p>\n      <p>\n        <ul>\n          <li>\n            Supports Up to 2 levels of nesting\n            <ul>\n              <li>1 level of nesting e.g (category: general)</li>\n              <li>2 levels of nesting e.g (category: general.yes)</li>\n            </ul>\n          </li>\n          <li>Columns should be in row 0 in your excel sheet</li>\n          <li>\n            Key names should be exact, a mistake found like (E80:) while the\n            truth is (E80)\n          </li>\n          <li>\n            Category key should have correct order, within same row of first key\n            relating to it or before it.\n          </li>\n          <li>\n            Mapping is done within same level, This won't work:{\" \"}\n            {\"{E10:error} with { errorCodes: {E10:error} }\"}\n            {\"\"}\n          </li>\n        </ul>\n      </p>\n      <Step1 setExcel={setExcel} />\n      <Step2 setInputObject={setInputObject} />\n      {excel && inputObject && (\n        <Step3 excel={excel!} errorCodes={inputObject!} />\n      )}\n    </div>\n  );\n};\n\nexport default ExcelToJS;\n","import React, { useState } from \"react\";\nimport Step1 from \"./Step1\";\n\nconst JSToExcel = () => {\n  return (\n    <>\n      <p>\n        The purpose of this script is to take JS Objects (en,ar) and it will\n        generate new excel sheet.\n      </p>\n      <i>supports up to 2 levels of nesting</i>\n      <Step1 />\n    </>\n  );\n};\n\nexport default JSToExcel;\n","import React, { useState } from \"react\";\r\n\r\nimport \"./App.css\";\r\nimport \"react-tabs/style/react-tabs.css\";\r\nimport { Tab, TabList, TabPanel, Tabs } from \"react-tabs\";\r\nimport ExcelToJS from \"./ExcelToJS\";\r\nimport JSToExcel from \"./JsonToExcel\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <h1>Translate Al-Rajhi</h1>\r\n      <Tabs>\r\n        <TabList>\r\n          <Tab>Excel To JS</Tab>\r\n          <Tab>JS To Excel</Tab>\r\n        </TabList>\r\n\r\n        <TabPanel>\r\n          <ExcelToJS />\r\n        </TabPanel>\r\n        <TabPanel>\r\n          <JSToExcel />\r\n        </TabPanel>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}