{"version":3,"sources":["components/Step1.tsx","components/Step2.tsx","components/Step3.tsx","Util/mapping.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["schema","prop","Arabic","Step1","nextStep","setExcel","useForm","register","handleSubmit","formState","errors","isSubmitting","onSubmit","data","a","readXlsxFile","file","parsed","length","rows","console","log","type","accept","required","disabled","Step2","setErrorCodes","errorCodes","endsWith","errorCodesWithoutComma","replace","JSON5","e","alert","placeholder","style","width","Step3","excel","currentStep","useState","isLoading","setIsLoading","output","setOutput","excelOnlyOutput","setExcelOnlyOutput","useEffect","excelObject","key","errorCode","ar","en","mapping","Object","keys","defaultValue","stringify","space","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4125f8cd.chunk.js","sourcesContent":["import readXlsxFile from \"read-excel-file\";\nimport { useForm } from \"react-hook-form\";\nimport { StepWizardChildProps } from \"react-step-wizard\";\nimport React from \"react\";\n\nconst schema = {\n  \"Error Code\": {\n    prop: \"errorCode\",\n  },\n  \"Error Description\": {\n    prop: \"en\",\n  },\n  Arabic: {\n    prop: \"ar\",\n  },\n};\n\ntype PropsType = {\n  setExcel: Function;\n} & StepWizardChildProps;\n\nexport const Step1 = ({ nextStep, setExcel }: PropsType) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n  } = useForm();\n\n  const onSubmit = async (data: any) => {\n    try {\n      const parsed = await readXlsxFile(data.file[0], { schema: schema });\n      if (parsed.errors.length) {\n        throw parsed.errors;\n      }\n      setExcel(parsed.rows);\n      nextStep();\n      console.log(parsed);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return (\n    <div>\n      <header>\n        The purpose of this script is to take two inputs (Excel file, JSON\n        object) and it will map and replace your english translation with arabic\n        ones\n      </header>\n      <br />\n      <form onSubmit={handleSubmit(onSubmit)}>\n        {/* register your input into the hook by invoking the \"register\" function */}\n        <input\n          type=\"file\"\n          accept=\".xlsx\"\n          {...register(\"file\", { required: true })}\n        />\n\n        <br />\n        <br />\n        {/* errors will return when field validation fails  */}\n        {errors.file && <div>This field is required</div>}\n        <input type=\"submit\" disabled={isSubmitting} />\n      </form>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport readXlsxFile from \"read-excel-file\";\nimport { StepWizardChildProps } from \"react-step-wizard\";\nimport * as JSON5 from \"json5\";\ntype PropsType = {\n  setErrorCodes: Function;\n} & StepWizardChildProps;\n\nexport const Step2 = ({ setErrorCodes, nextStep }: PropsType) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n  } = useForm();\n\n  const onSubmit = async ({ errorCodes }: any) => {\n    try {\n      let errorCodesWithoutComma;\n      if (errorCodes.endsWith(\",\")) {\n        errorCodesWithoutComma = errorCodes.replace(/.$/, \"\");\n      }\n      const parsed = JSON5.parse(errorCodesWithoutComma ?? errorCodes);\n      setErrorCodes(parsed);\n      nextStep();\n    } catch (e) {\n      console.log(e);\n      alert(e);\n    }\n  };\n  return (\n    <div>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        {/* register your input into the hook by invoking the \"register\" function */}\n        <header>Error Codes JSON object: </header>\n        <textarea\n          placeholder={\"{}\"}\n          rows={30}\n          style={{ width: \"80%\" }}\n          {...register(\"errorCodes\", { required: true })}\n        />\n        <p>\n          <b>Note: </b> Feel free to add extra keys not in the excel file, i\n          won't remove them!\n        </p>\n        {/* errors will return when field validation fails  */}\n        {errors.errorCodes && <div>This field is required</div>}\n        <input type=\"submit\" disabled={isSubmitting} />\n      </form>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { mapping } from \"../Util/mapping\";\nimport { ErrorCodesType, ExcelType } from \"../types/Input\";\nimport { StepWizardChildProps } from \"react-step-wizard\";\nimport JSON5 from \"json5\";\n\ntype PropType = {\n  excel: ExcelType[];\n  errorCodes: ErrorCodesType;\n  setOutput: Function;\n  setExcelOnlyOutput: Function;\n} & StepWizardChildProps;\n\nexport const Step3 = ({ excel, errorCodes, currentStep }: PropType) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [output, setOutput] = useState<ErrorCodesType>();\n  const [excelOnlyOutput, setExcelOnlyOutput] = useState<ErrorCodesType>();\n\n  useEffect(() => {\n    if (currentStep === 3) {\n      const output = mapping(excel, errorCodes);\n      setOutput(output.errorCodes);\n      setExcelOnlyOutput(output.excelOnlyOutput);\n      setIsLoading(false);\n    }\n  }, [currentStep]);\n\n  const fix = (input: string) => {\n    // const obj = output![key];\n    // input && (output![key].ar = input);\n  };\n\n  if (isLoading) return <h3>We're cooking your translation!</h3>;\n\n  return (\n    <>\n      <h3> Successfuly translated {Object.keys(output!).length} strings</h3>\n      <h5>\n        These translations are found in excel but not in your input, just saying\n        if you're interested:\n      </h5>\n      <textarea\n        style={{ width: \"80%\" }}\n        rows={10}\n        defaultValue={JSON5.stringify(excelOnlyOutput, { space: \"\\t\" })}\n      />\n      <h4>Final Output</h4>\n      <textarea\n        style={{ width: \"80%\" }}\n        rows={30}\n        defaultValue={JSON5.stringify(output, { space: \"\\t\" })}\n      />\n    </>\n  );\n};\n","import { ErrorCodesType, ExcelType } from \"../types/Input\";\n\nexport const mapping = (excel: ExcelType[], errorCodes: ErrorCodesType) => {\n  console.log(\"Start Mapping with error codes\", errorCodes);\n  const excelOnlyOutput: ErrorCodesType = {};\n\n  for (const excelObject of excel) {\n    const key = excelObject.errorCode;\n\n    const obj = errorCodes[key];\n\n    if (obj) {\n      errorCodes[key] = excelObject.ar;\n    } else {\n      excelOnlyOutput[key] = excelObject.en;\n    }\n  }\n\n  console.log(\"result\", errorCodes);\n  console.log(\"not found\", excelOnlyOutput);\n\n  return { errorCodes, excelOnlyOutput };\n};\n","import React, { useState } from \"react\";\nimport StepWizard from \"react-step-wizard\";\n\nimport \"./App.css\";\nimport { Step1 } from \"./components/Step1\";\nimport { Step2 } from \"./components/Step2\";\nimport { Step3 } from \"./components/Step3\";\nimport { ErrorCodesType, ExcelType } from \"./types/Input\";\n\nfunction App() {\n  // Step1\n  const [excel, setExcel] = useState<ExcelType[]>();\n  // Step2\n  const [errorCodes, setErrorCodes] = useState<ErrorCodesType>();\n  // Step3\n  // const [output, setOutput] = useState<OutputType>();\n  // const [excelOnlyOutput, setExcelOnlyOutput] = useState<OutputType>();\n\n  // @ts-ignore\n  // @ts-ignore\n  // @ts-ignore\n  return (\n    <div>\n      <h1>[Ejada] Translate Al-Rajhi Error Codes </h1>\n\n      <StepWizard>\n        {/*//@ts-ignore*/}\n        <Step1 setExcel={setExcel} />\n        {/*//@ts-ignore*/}\n        <Step2 setErrorCodes={setErrorCodes} />\n        {/*//@ts-ignore*/}\n        <Step3 excel={excel!} errorCodes={errorCodes!} />\n      </StepWizard>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}