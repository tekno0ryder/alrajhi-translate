{"version":3,"sources":["components/Step2.tsx","components/Step1.tsx","Util/mapping.tsx","components/Step3.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Step2","setInputObject","useForm","register","handleSubmit","formState","errors","isSubmitting","onSubmit","a","inputObject","eval","en","e","console","log","alert","defaultValue","rows","style","fontSize","width","required","type","disabled","Step1","setExcel","makeFinalObject","lastCategory","lastNestedCategory","final","row","category","splitted","split","length","key","ar","data","map","sheetParsed","parseInt","sheet","readXlsxFile","file","isNaN","parsed","postProcessed","htmlFor","placeholder","accept","_","isEmpty","assignpParentKey","obj","key1","key2","key3","Step3","excel","errorCodes","useState","isLoading","setIsLoading","output","setOutput","excelOnlyOutput","setExcelOnlyOutput","ref","useRef","useEffect","inputObjectCopy","cloneDeep","Object","entries","excelKey","excelVal","excelKey1","excelVal1","excelKey2","excelVal2","errorCodesCopy","mapping","useLayoutEffect","current","scrollIntoView","behavior","readOnly","value","JSON5","stringify","space","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff14ed59.chunk.js","sourcesContent":["import React from \"react\";\nimport { useForm } from \"react-hook-form\";\n\ntype PropsType = {\n  setInputObject: Function;\n};\n\nexport const Step2 = ({ setInputObject }: PropsType) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n  } = useForm();\n\n  const onSubmit = async ({ inputObject }: any) => {\n    try {\n      let en;\n      eval(\"en =\" + inputObject);\n      setInputObject(en);\n    } catch (e) {\n      console.log(e);\n      alert(e);\n    }\n  };\n  return (\n    <div>\n      <h2>Step 2: Input JS Object</h2>\n      <p>We're going to eval() your object to our variable (let en)</p>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <textarea\n          defaultValue={\"{}\"}\n          rows={30}\n          style={{ fontSize: \"1rem\", width: \"80%\" }}\n          {...register(\"inputObject\", { required: true })}\n        />\n\n        {/* errors will return when field validation fails  */}\n        {errors.inputObject && <div>This field is required</div>}\n        <br />\n        <input type=\"submit\" disabled={isSubmitting} />\n      </form>\n    </div>\n  );\n};\n","import readXlsxFile from \"read-excel-file\";\nimport { useForm } from \"react-hook-form\";\nimport React from \"react\";\nimport { isNaN } from \"lodash\";\nimport _ from \"lodash\";\n\ntype PropsType = {\n  setExcel: Function;\n};\n\nconst defaultSheetNumber = 1;\nconst defaultCategoryCell = \"Service\";\nconst defaultKeyCell = \"Key\";\nconst defaultEnglishCell = \"English\";\nconst defaultArabicCell = \"Arabic\";\n\nexport const Step1 = ({ setExcel }: PropsType) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n  } = useForm();\n\n  const makeFinalObject = (rows: any[]) => {\n    const final: any = {};\n    let lastCategory;\n    let lastNestedCategory;\n    for (const row of rows) {\n      const category = row.category;\n      // Assign new category if we find one\n      if (category) {\n        const splitted = category.split(\".\");\n        // Check if nested or not\n        if (splitted.length === 2) {\n          lastCategory = splitted[0];\n          lastNestedCategory = splitted[1];\n        } else {\n          lastCategory = category;\n          lastNestedCategory = null;\n        }\n      }\n\n      if (!row.key) {\n        // Either this row has category key only or completely empty\n        continue;\n      }\n\n      // Exist 2nd level\n      if (lastCategory && lastNestedCategory) {\n        final[lastCategory][lastNestedCategory] = {\n          ...final[lastCategory][lastNestedCategory],\n          [row.key]: { en: row.en, ar: row.ar },\n        };\n        // Exist 1st level only\n      } else if (lastCategory) {\n        final[lastCategory] = {\n          ...final[lastCategory],\n          [row.key]: { en: row.en, ar: row.ar },\n        };\n      }\n      // Top Level\n      else {\n        final[row.key] = { ...final[row.key], en: row.en, ar: row.ar };\n      }\n    }\n    return final;\n  };\n\n  const onSubmit = async (data: any) => {\n    try {\n      const map = {\n        [data.key]: \"key\",\n        [data.en]: \"en\",\n        [data.ar]: \"ar\",\n        ...(data.category && { [data.category]: \"category\" }),\n      };\n\n      const sheetParsed = parseInt(data.sheet);\n      const parsed = await readXlsxFile(data.file[0], {\n        map,\n        sheet: isNaN(sheetParsed) ? data.sheet : sheetParsed,\n      });\n      if (parsed.errors.length) {\n        throw parsed.errors;\n      }\n      console.log(\"parsed\", parsed);\n      const postProcessed = makeFinalObject(parsed.rows);\n      console.log(\"postProcessed\", postProcessed);\n      setExcel(postProcessed);\n    } catch (e) {\n      alert(e);\n      console.log(e);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Step 1: Excel File</h2>\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <fieldset>\n          <legend>Data</legend>\n          <label htmlFor={\"sheet\"}>Sheet: </label>\n          <input\n            type=\"text\"\n            defaultValue={defaultSheetNumber}\n            placeholder=\"Number 1,2,3\"\n            {...register(\"sheet\", { required: true })}\n          />\n          <br /> <br />\n          <label htmlFor={\"category\"}>Category Cell (optional): </label>\n          <input\n            type=\"text\"\n            defaultValue={defaultCategoryCell}\n            placeholder=\"Cell Name\"\n            {...register(\"category\")}\n          />\n          <br /> <br />\n          <label htmlFor={\"key\"}>Key Cell: </label>\n          <input\n            type=\"text\"\n            defaultValue={defaultKeyCell}\n            placeholder=\"Cell Name\"\n            {...register(\"key\", { required: true })}\n          />\n          <br /> <br />\n          <label htmlFor={\"en\"}>EN Cell: </label>\n          <input\n            type=\"text\"\n            defaultValue={defaultEnglishCell}\n            placeholder=\"Cell Name\"\n            {...register(\"en\", { required: true })}\n          />\n          <label htmlFor={\"ar\"}> AR Cell: </label>\n          <input\n            type=\"text\"\n            defaultValue={defaultArabicCell}\n            placeholder=\"Cell Name\"\n            {...register(\"ar\", { required: true })}\n          />\n          <br />\n          <br />\n          <input\n            type=\"file\"\n            accept=\".xlsx\"\n            {...register(\"file\", { required: true })}\n          />\n          <br /> <br />\n          {!_.isEmpty(errors) && <div>Required Fields</div>}\n          <input type=\"submit\" disabled={isSubmitting} />\n        </fieldset>\n      </form>\n    </div>\n  );\n};\n","// @ts-nocheck\nimport { inputObjectType, ExcelType } from \"../types/Input\";\nimport _ from \"lodash\";\n\nconst assignpParentKey = (obj: any, key1: any, key2?: any, key3?: any) => {\n  obj[key1] = obj[key1] ?? {};\n  if (key2) {\n    obj[key1][key2] = obj[key1][key2] ?? {};\n  }\n  if (key3) {\n    obj[key1][key2][key3] = obj[key1][key2][key3] ?? {};\n  }\n};\n\nexport const mapping = (excel: ExcelType, inputObject: inputObjectType) => {\n  console.log(\"Start Mapping inputObject\", inputObject);\n  const excelOnlyOutput: inputObjectType = {};\n\n  // Take a copy of the inputObject to preserve existing values\n  const inputObjectCopy = _.cloneDeep(inputObject);\n\n  for (const [excelKey, excelVal] of Object.entries(excel)) {\n    // Top Level\n    if (\"en\" in excelVal) {\n      const obj = inputObjectCopy[excelKey];\n      if (obj) {\n        inputObjectCopy[excelKey] = excelVal.ar ?? excelVal.en;\n      } else {\n        excelOnlyOutput[excelKey] = excelVal.ar ?? excelVal.en;\n      }\n    }\n    // 1st Level\n    else {\n      for (const [excelKey1, excelVal1] of Object.entries(excelVal)) {\n        if (\"en\" in excelVal1) {\n          // Assign {} if undefined\n          assignpParentKey(inputObjectCopy, excelKey);\n          const obj = inputObjectCopy[excelKey][excelKey1];\n          if (obj) {\n            inputObjectCopy[excelKey][excelKey1] = excelVal1.ar ?? excelVal1.en;\n          } else {\n            assignpParentKey(excelOnlyOutput, excelKey);\n            excelOnlyOutput[excelKey][excelKey1] = excelVal1.ar ?? excelVal1.en;\n          }\n        } else {\n          // 2st Level\n          for (const [excelKey2, excelVal2] of Object.entries(\n            excelVal1 as any\n          )) {\n            // Assign {} if undefined\n            assignpParentKey(inputObjectCopy, excelKey, excelKey1);\n            const obj = inputObjectCopy[excelKey][excelKey1][excelKey2];\n            if (obj) {\n              inputObjectCopy[excelKey][excelKey1][excelKey2] =\n                excelVal2.ar ?? excelVal2.ar;\n            } else {\n              assignpParentKey(excelOnlyOutput, excelKey, excelKey1);\n              excelOnlyOutput[excelKey][excelKey1][excelKey2] =\n                excelVal2.ar ?? excelVal1.en;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  console.log(\"result\", inputObjectCopy);\n  console.log(\"not found\", excelOnlyOutput);\n\n  return { errorCodesCopy: inputObjectCopy, excelOnlyOutput };\n};\n","import React, { useEffect, useLayoutEffect, useRef, useState } from \"react\";\nimport { mapping } from \"../Util/mapping\";\nimport { inputObjectType, ExcelType } from \"../types/Input\";\nimport JSON5 from \"json5\";\n\ntype PropType = {\n  excel: ExcelType;\n  errorCodes: inputObjectType;\n};\n\nexport const Step3 = ({ excel, errorCodes }: PropType) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [output, setOutput] = useState<inputObjectType>();\n  const [excelOnlyOutput, setExcelOnlyOutput] = useState<inputObjectType>();\n\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const output = mapping(excel, errorCodes);\n    setOutput(output.errorCodesCopy);\n    setExcelOnlyOutput(output.excelOnlyOutput);\n    setIsLoading(false);\n  }, [excel, errorCodes]);\n\n  useLayoutEffect(() => {\n    // When processing done\n    if (!isLoading) {\n      ref.current && ref.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }, [isLoading]);\n\n  if (isLoading) return <h3>We're cooking your translation!</h3>;\n\n  return (\n    <div ref={ref}>\n      <h2>Step 3: Output</h2>\n\n      <h4>Final Output</h4>\n      <p>\n        <b>Note:</b> Translations not found in Excel are kept AS IS\n      </p>\n      <textarea\n        readOnly\n        style={{ fontSize: \"1rem\", width: \"80%\" }}\n        rows={30}\n        value={JSON5.stringify(output, { space: \"\\t\" })}\n      />\n      <p>[If interested] Translations found in Excel but NOT in your JSON:</p>\n      <textarea\n        readOnly\n        style={{ fontSize: \"1rem\", width: \"80%\" }}\n        rows={30}\n        value={JSON5.stringify(excelOnlyOutput, { space: \"\\t\" })}\n      />\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\n\nimport \"./App.css\";\nimport { Step1 } from \"./components/Step1\";\nimport { Step2 } from \"./components/Step2\";\nimport { Step3 } from \"./components/Step3\";\nimport { inputObjectType, ExcelType } from \"./types/Input\";\n\nfunction App() {\n  // Step1\n  const [excel, setExcel] = useState<ExcelType>();\n  // Step2\n  const [inputObject, setInputObject] = useState<inputObjectType>();\n\n  return (\n    <div>\n      <h1>Translate Al-Rajhi Error Codes </h1>\n      <p>\n        The purpose of this script is to take two inputs (Excel file, JS object)\n        and it will map and replace your english translation with arabic ones\n      </p>\n      <p>\n        <ul>\n          <li>\n            Supports Up to 2 levels of nesting\n            <ul>\n              <li>1 level of nesting e.g (category: general)</li>\n              <li>2 levels of nesting e.g (category: general.yes)</li>\n            </ul>\n          </li>\n          <li>Columns should be in row 0 in your excel sheet</li>\n          <li>\n            Key names should be exact, a mistake found like (E80:) while the\n            truth is (E80)\n          </li>\n          <li>\n            Category key should have correct order, within same row of first key\n            relating to it or before it.\n          </li>\n          <li>\n            Mapping is done within same level, This won't work:{\" \"}\n            {\"{E10:error} with { errorCodes: {E10:error} }\"}\n            {\"\"}\n          </li>\n        </ul>\n      </p>\n      <Step1 setExcel={setExcel} />\n      <Step2 setInputObject={setInputObject} />\n      {excel && inputObject && (\n        <Step3 excel={excel!} errorCodes={inputObject!} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}