{"version":3,"sources":["components/Step1.tsx","components/Step2.tsx","components/Step3.tsx","Util/mapping.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["schema","prop","Arabic","Step1","setExcel","useForm","register","handleSubmit","formState","errors","isSubmitting","onSubmit","data","a","readXlsxFile","file","parsed","length","rows","console","log","type","accept","required","disabled","Step2","setErrorCodes","errorCodes","endsWith","errorCodesWithoutComma","replace","JSON5","e","alert","placeholder","style","width","Step3","excel","useState","isLoading","setIsLoading","output","setOutput","excelOnlyOutput","setExcelOnlyOutput","ref","useRef","useEffect","errorCodesCopy","_","cloneDeep","excelObject","key","errorCode","ar","mapping","current","scrollIntoView","behavior","value","stringify","space","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ee8dc90.chunk.js","sourcesContent":["import readXlsxFile from \"read-excel-file\";\nimport { useForm } from \"react-hook-form\";\nimport React from \"react\";\n\nconst schema = {\n  \"Error Code\": {\n    prop: \"errorCode\",\n  },\n  \"Error Description\": {\n    prop: \"en\",\n  },\n  Arabic: {\n    prop: \"ar\",\n  },\n};\n\ntype PropsType = {\n  setExcel: Function;\n};\n\nexport const Step1 = ({ setExcel }: PropsType) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n  } = useForm();\n\n  const onSubmit = async (data: any) => {\n    try {\n      const parsed = await readXlsxFile(data.file[0], { schema: schema });\n      if (parsed.errors.length) {\n        throw parsed.errors;\n      }\n      setExcel(parsed.rows);\n      console.log(parsed);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Step 1: Excel File</h2>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <input\n          type=\"file\"\n          accept=\".xlsx\"\n          {...register(\"file\", { required: true })}\n        />\n\n        <br />\n        <br />\n        {/* errors will return when field validation fails  */}\n        {errors.file && <div>This field is required</div>}\n        <input type=\"submit\" disabled={isSubmitting} />\n      </form>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport readXlsxFile from \"read-excel-file\";\nimport * as JSON5 from \"json5\";\n\ntype PropsType = {\n  setErrorCodes: Function;\n};\n\nexport const Step2 = ({ setErrorCodes }: PropsType) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n  } = useForm();\n\n  const onSubmit = async ({ errorCodes }: any) => {\n    try {\n      let errorCodesWithoutComma;\n      if (errorCodes.endsWith(\",\")) {\n        errorCodesWithoutComma = errorCodes.replace(/.$/, \"\");\n      }\n      const parsed = JSON5.parse(errorCodesWithoutComma ?? errorCodes);\n      setErrorCodes(parsed);\n    } catch (e) {\n      console.log(e);\n      alert(e);\n    }\n  };\n  return (\n    <div>\n      <h2>Step 2: Error Codes JSON</h2>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <textarea\n          placeholder={\"{}\"}\n          rows={30}\n          style={{ width: \"80%\" }}\n          {...register(\"errorCodes\", { required: true })}\n        />\n\n        {/* errors will return when field validation fails  */}\n        {errors.errorCodes && <div>This field is required</div>}\n        <br />\n        <input type=\"submit\" disabled={isSubmitting} />\n      </form>\n    </div>\n  );\n};\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { mapping } from \"../Util/mapping\";\nimport { ErrorCodesType, ExcelType } from \"../types/Input\";\nimport JSON5 from \"json5\";\n\ntype PropType = {\n  excel: ExcelType[];\n  errorCodes: ErrorCodesType;\n};\n\nexport const Step3 = ({ excel, errorCodes }: PropType) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [output, setOutput] = useState<ErrorCodesType>();\n  const [excelOnlyOutput, setExcelOnlyOutput] = useState<ErrorCodesType>();\n\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const output = mapping(excel, errorCodes);\n    setOutput(output.errorCodesCopy);\n    setExcelOnlyOutput(output.excelOnlyOutput);\n    setIsLoading(false);\n    ref.current && ref.current.scrollIntoView({ behavior: \"smooth\" });\n  }, [excel, errorCodes]);\n\n  if (isLoading) return <h3>We're cooking your translation!</h3>;\n\n  return (\n    <div ref={ref}>\n      <h2>Step 3: Output</h2>\n\n      <h4>Final Output</h4>\n      <p>\n        <b>Note:</b> Translations not found in Excel are kept AS IS\n      </p>\n      <textarea\n        style={{ width: \"80%\" }}\n        rows={30}\n        value={JSON5.stringify(output, { space: \"\\t\" })}\n      />\n      <p>[If interested] Translations found in Excel but NOT in your JSON:</p>\n      <textarea\n        style={{ width: \"80%\" }}\n        rows={10}\n        value={JSON5.stringify(excelOnlyOutput, { space: \"\\t\" })}\n      />\n    </div>\n  );\n};\n","import { ErrorCodesType, ExcelType } from \"../types/Input\";\nimport _ from \"lodash\";\n\nexport const mapping = (excel: ExcelType[], errorCodes: ErrorCodesType) => {\n  console.log(\"Start Mapping with error codes\", errorCodes);\n  const excelOnlyOutput: ErrorCodesType = {};\n\n  // Take a copy of the errorCodes to preserve existing values\n  const errorCodesCopy = _.cloneDeep(errorCodes);\n\n  for (const excelObject of excel) {\n    const key = excelObject.errorCode;\n\n    const obj = errorCodesCopy[key];\n\n    if (obj) {\n      errorCodesCopy[key] = excelObject.ar;\n    } else {\n      excelOnlyOutput[key] = excelObject.ar;\n    }\n  }\n\n  console.log(\"result\", errorCodesCopy);\n  console.log(\"not found\", excelOnlyOutput);\n\n  return { errorCodesCopy, excelOnlyOutput };\n};\n","import React, { useState } from \"react\";\n\nimport \"./App.css\";\nimport { Step1 } from \"./components/Step1\";\nimport { Step2 } from \"./components/Step2\";\nimport { Step3 } from \"./components/Step3\";\nimport { ErrorCodesType, ExcelType } from \"./types/Input\";\n\nfunction App() {\n  // Step1\n  const [excel, setExcel] = useState<ExcelType[]>();\n  // Step2\n  const [errorCodes, setErrorCodes] = useState<ErrorCodesType>();\n\n  return (\n    <div>\n      <h1>Translate Al-Rajhi Error Codes </h1>\n      <p>\n        The purpose of this script is to take two inputs (Excel file, JSON\n        object) and it will map and replace your english translation with arabic\n        ones\n      </p>\n      <Step1 setExcel={setExcel} />\n      <Step2 setErrorCodes={setErrorCodes} />\n      {excel && errorCodes && <Step3 excel={excel!} errorCodes={errorCodes!} />}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}